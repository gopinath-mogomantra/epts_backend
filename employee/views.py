# ===============================================
# employee/views.py (Final Synced & Polished)
# ===============================================

from rest_framework import viewsets, status, permissions, filters
from rest_framework.response import Response
from rest_framework.exceptions import NotFound
from django_filters.rest_framework import DjangoFilterBackend
from django.contrib.auth import get_user_model

from .models import Department, Employee
from .serializers import (
    DepartmentSerializer,
    EmployeeSerializer,
    EmployeeCreateUpdateSerializer,
)

User = get_user_model()


# ============================================================
# ‚úÖ DEPARTMENT VIEWSET
# ============================================================
class DepartmentViewSet(viewsets.ModelViewSet):
    """
    Handles CRUD operations for Departments.

    - Admins can create/update/delete.
    - Managers & Employees can only view.
    """
    queryset = Department.objects.all().order_by("name")
    serializer_class = DepartmentSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    search_fields = ["name", "description"]
    ordering_fields = ["name", "created_at"]
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """Show only active departments by default."""
        return super().get_queryset().filter(is_active=True)

    def create(self, request, *args, **kwargs):
        user = request.user
        if not (user.is_superuser or getattr(user, "role", "") == "Admin"):
            return Response(
                {"error": "Only Admins can create departments."},
                status=status.HTTP_403_FORBIDDEN,
            )
        return super().create(request, *args, **kwargs)

    def destroy(self, request, *args, **kwargs):
        """Deactivate department instead of hard delete."""
        instance = self.get_object()
        user = request.user

        if instance.employees.exists():
            return Response(
                {"error": "Cannot delete a department with assigned employees."},
                status=status.HTTP_400_BAD_REQUEST,
            )

        if not (user.is_superuser or getattr(user, "role", "") == "Admin"):
            return Response(
                {"error": "Only Admins can delete departments."},
                status=status.HTTP_403_FORBIDDEN,
            )

        instance.is_active = False
        instance.save(update_fields=["is_active"])
        return Response(
            {"message": "üóëÔ∏è Department deactivated successfully."},
            status=status.HTTP_200_OK,
        )


# ============================================================
# ‚úÖ EMPLOYEE VIEWSET
# ============================================================
class EmployeeViewSet(viewsets.ModelViewSet):
    """
    Unified CRUD ViewSet for Employees.

    - Admins: Full access
    - Managers: Access limited to their team
    - Employees: Can only view their own record
    Lookup is based on `user.emp_id` instead of numeric ID.
    """

    queryset = Employee.objects.select_related("user", "department", "manager").prefetch_related("team_members")
    serializer_class = EmployeeSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ["department", "manager", "status"]
    search_fields = [
        "user__first_name",
        "user__last_name",
        "user__emp_id",
        "designation",
        "contact_number",
    ]
    ordering_fields = ["joining_date", "user__first_name", "user__emp_id"]
    permission_classes = [permissions.IsAuthenticated]
    lookup_field = "emp_id"  # URL lookup (e.g., /api/employees/EMP0005/)

    # --------------------------------------------------------
    # Role-Based Query Restriction
    # --------------------------------------------------------
    def get_queryset(self):
        user = self.request.user
        qs = super().get_queryset()

        if getattr(user, "role", "") == "Manager":
            return qs.filter(manager__user=user)
        elif getattr(user, "role", "") == "Employee":
            return qs.filter(user=user)
        return qs

    # --------------------------------------------------------
    # Fetch Object via emp_id
    # --------------------------------------------------------
    def get_object(self):
        emp_id = self.kwargs.get("emp_id")
        try:
            return Employee.objects.select_related("user", "department", "manager").get(
                user__emp_id__iexact=emp_id
            )
        except Employee.DoesNotExist:
            raise NotFound(detail=f"Employee with emp_id '{emp_id}' not found.")

    # --------------------------------------------------------
    # Dynamic Serializer Selection
    # --------------------------------------------------------
    def get_serializer_class(self):
        if self.action in ["create", "update", "partial_update"]:
            return EmployeeCreateUpdateSerializer
        return EmployeeSerializer

    # --------------------------------------------------------
    # CREATE
    # --------------------------------------------------------
    def create(self, request, *args, **kwargs):
        user = request.user
        if not (user.is_superuser or getattr(user, "role", "") in ["Admin", "Manager"]):
            return Response(
                {"error": "You do not have permission to create employees."},
                status=status.HTTP_403_FORBIDDEN,
            )

        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        employee = serializer.save()

        return Response(
            {
                "message": "‚úÖ Employee created successfully.",
                "employee": EmployeeSerializer(employee, context={"request": request}).data,
            },
            status=status.HTTP_201_CREATED,
        )

    # --------------------------------------------------------
    # RETRIEVE
    # --------------------------------------------------------
    def retrieve(self, request, *args, **kwargs):
        employee = self.get_object()
        user = request.user

        # Access control
        if getattr(user, "role", "") == "Manager" and (not employee.manager or employee.manager.user != user):
            return Response(
                {"error": "Managers can view only their team members."},
                status=status.HTTP_403_FORBIDDEN,
            )

        if getattr(user, "role", "") == "Employee" and employee.user != user:
            return Response(
                {"error": "Employees can view only their own record."},
                status=status.HTTP_403_FORBIDDEN,
            )

        serializer = self.get_serializer(employee)
        return Response(serializer.data, status=status.HTTP_200_OK)

    # --------------------------------------------------------
    # UPDATE
    # --------------------------------------------------------
    def update(self, request, *args, **kwargs):
        employee = self.get_object()
        user = request.user

        if getattr(user, "role", "") == "Manager" and (not employee.manager or employee.manager.user != user):
            return Response(
                {"error": "Managers can update only their team members."},
                status=status.HTTP_403_FORBIDDEN,
            )

        serializer = self.get_serializer(employee, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()

        return Response(
            {
                "message": "‚úÖ Employee updated successfully.",
                "employee": EmployeeSerializer(employee, context={"request": request}).data,
            },
            status=status.HTTP_200_OK,
        )

    # --------------------------------------------------------
    # DELETE
    # --------------------------------------------------------
    def destroy(self, request, *args, **kwargs):
        employee = self.get_object()
        user = request.user

        if getattr(employee.user, "role", "") in ["Admin", "Manager"]:
            return Response(
                {"error": "‚ùå Cannot delete Admin or Manager accounts."},
                status=status.HTTP_403_FORBIDDEN,
            )

        if not (user.is_superuser or getattr(user, "role", "") in ["Admin", "Manager"]):
            return Response(
                {"error": "You do not have permission to delete employees."},
                status=status.HTTP_403_FORBIDDEN,
            )

        employee.user.delete()
        employee.delete()

        return Response(
            {"message": "üóëÔ∏è Employee deleted successfully."},
            status=status.HTTP_204_NO_CONTENT,
        )
