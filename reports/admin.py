# ===============================================
# reports/admin.py
# ===============================================
# Django Admin configuration for Cached Reports.
# Features:
# ✅ Displays report type, period, department, or manager
# ✅ Color-coded report type icons
# ✅ Clickable download link for cached files
# ✅ Read-only generated metadata
# ✅ Restricted edit/delete for security
# ===============================================

from django.contrib import admin
from django.utils.html import format_html
from .models import CachedReport


@admin.register(CachedReport)
class CachedReportAdmin(admin.ModelAdmin):
    """Admin configuration for Cached Report model."""

    # ------------------------------------------------------
    # Columns in List View
    # ------------------------------------------------------
    list_display = (
        "id",
        "colored_report_type",
        "get_period_display",
        "year",
        "week_number",
        "month",
        "get_manager_name",
        "get_department_name",
        "get_generated_by",
        "is_active",
        "generated_at",
        "file_link",
    )

    # ------------------------------------------------------
    # 🔹 Filters, Search, and Ordering
    # ------------------------------------------------------
    list_filter = ("report_type", "year", "is_active")
    search_fields = (
        "report_type",
        "department__name",
        "manager__first_name",
        "manager__last_name",
        "generated_by__username",
    )
    ordering = ("-generated_at",)
    list_per_page = 25

    # ------------------------------------------------------
    # 🔹 Read-only and Protected Fields
    # ------------------------------------------------------
    readonly_fields = ("generated_at", "file_path")

    # ------------------------------------------------------
    # 🔹 Custom Display Methods
    # ------------------------------------------------------
    def colored_report_type(self, obj):
        """Display colored report type icons for visual clarity."""
        icons = {
            "weekly": "📅",
            "monthly": "📊",
            "manager": "👨‍💼",
            "department": "🏢",
        }
        color_map = {
            "weekly": "#2b8a3e",
            "monthly": "#0d6efd",
            "manager": "#f59f00",
            "department": "#8b5cf6",
        }
        icon = icons.get(obj.report_type, "📁")
        color = color_map.get(obj.report_type, "gray")
        return format_html(
            f"<b><span style='color:{color};'>{icon} {obj.report_type.title()}</span></b>"
        )
    colored_report_type.short_description = "Report Type"

    def get_manager_name(self, obj):
        """Display manager's full name (if applicable)."""
        if obj.manager:
            return f"{obj.manager.first_name} {obj.manager.last_name}".strip()
        return "-"
    get_manager_name.short_description = "Manager"

    def get_department_name(self, obj):
        """Display department name (if applicable)."""
        return obj.department.name if obj.department else "-"
    get_department_name.short_description = "Department"

    def get_generated_by(self, obj):
        """Display the name of the user who generated the report."""
        if obj.generated_by:
            return f"{obj.generated_by.first_name} {obj.generated_by.last_name}".strip() or obj.generated_by.username
        return "-"
    get_generated_by.short_description = "Generated By"

    def file_link(self, obj):
        """Clickable link for exported report files."""
        if obj.file_path:
            return format_html(
                '<a href="{}" target="_blank" style="color:#007bff;">⬇️ Download</a>',
                obj.file_path.url,
            )
        return "-"
    file_link.short_description = "Export File"

    def get_period_display(self, obj):
        """Display formatted report period."""
        return obj.get_period_display()
    get_period_display.short_description = "Period"

    # ------------------------------------------------------
    # Permission Overrides (Security)
    # ------------------------------------------------------
    def has_add_permission(self, request):
        """Disable manual addition — only system/Cron jobs can create reports."""
        return False

    def has_change_permission(self, request, obj=None):
        """Allow only superusers to toggle 'is_active' or metadata."""
        if request.user.is_superuser:
            return True
        return False

    def has_delete_permission(self, request, obj=None):
        """Restrict delete access to superusers."""
        return request.user.is_superuser
